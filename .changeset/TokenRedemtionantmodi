// my_script.js
import { ThirdwebSDK } from "@thirdweb-dev/sdk";

// instantiate the SDK in read-only mode 
// all major chains and testnets are supported (e.g. `mainnet`, 'optimism`, 'arbitrum', 'polygon', `goerli`, 'mumbai', etc.)
const sdk = new ThirdwebSDK("Ethereum");

// access your deployed contracts
const contract = await sdk.getContract("0x80fBB6122b8E023988e640dB1ae348a10A7933E8");
[
  {
    "type": "constructor",
    "name": "",
    "inputs": [
      {
        "type": "address",
        "name": "_token",
        "internalType": "contract IERC20Permit"
      },
      {
        "type": "uint256",
        "name": "_endingTimestamp",
        "internalType": "uint256"
      },
      {
        "type": "address",
        "name": "_recipient",
        "internalType": "address"
      },
      {
        "type": "uint256",
        "name": "_tokenToEthRate",
        "internalType": "uint256"
      },
      {
        "type": "bytes32",
        "name": "_termsHash",
        "internalType": "bytes32"
      },
      {
        "type": "address",
        "name": "_blocklist",
        "internalType": "contract Blocklist"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "AddressBlocklisted",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "error",
    "name": "BlocklistNotInitialized",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "error",
    "name": "FailedToSendEth",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "error",
    "name": "RedemptionPeriodFinished",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "error",
    "name": "RedemptionPeriodNotFinished",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "error",
    "name": "TermsNotCorrect",
    "inputs": [],
    "outputs": []
  },
  {
    "type": "event",
    "name": "EthClaimed",
    "inputs": [
      {
        "type": "address",
        "name": "receiver",
        "indexed": false,
        "internalType": "address"
      },
      {
        "type": "uint256",
        "name": "tokenAmount",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "type": "uint256",
        "name": "ethAmount",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "EthReceived",
    "inputs": [
      {
        "type": "address",
        "name": "sender",
        "indexed": false,
        "internalType": "address"
      },
      {
        "type": "uint256",
        "name": "ethSent",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "anonymous": false
  },
  {
    "type": "function",
    "name": "DEAD_ADDRESS",
    "inputs": [],
    "outputs": [
      {
        "type": "address",
        "name": "",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "blocklist",
    "inputs": [],
    "outputs": [
      {
        "type": "address",
        "name": "",
        "internalType": "contract Blocklist"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "claimRemainings",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "endingTimestamp",
    "inputs": [],
    "outputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "permitRedeem",
    "inputs": [
      {
        "type": "bytes32",
        "name": "_termsHash",
        "internalType": "bytes32"
      },
      {
        "type": "uint256",
        "name": "amount",
        "internalType": "uint256"
      },
      {
        "type": "uint256",
        "name": "deadline",
        "internalType": "uint256"
      },
      {
        "type": "uint8",
        "name": "v",
        "internalType": "uint8"
      },
      {
        "type": "bytes32",
        "name": "r",
        "internalType": "bytes32"
      },
      {
        "type": "bytes32",
        "name": "s",
        "internalType": "bytes32"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "recipient",
    "inputs": [],
    "outputs": [
      {
        "type": "address",
        "name": "",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "redeem",
    "inputs": [
      {
        "type": "bytes32",
        "name": "_termsHash",
        "internalType": "bytes32"
      },
      {
        "type": "uint256",
        "name": "tokenAmount",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "termsHash",
    "inputs": [],
    "outputs": [
      {
        "type": "bytes32",
        "name": "",
        "internalType": "bytes32"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "token",
    "inputs": [],
    "outputs": [
      {
        "type": "address",
        "name": "",
        "internalType": "contract IERC20Permit"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenAmountBase",
    "inputs": [],
    "outputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenToEthRate",
    "inputs": [],
    "outputs": [
      {
        "type": "uint256",
        "name": "",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "receive",
    "name": "",
    "inputs": [],
    "outputs": [],
    "stateMutability": "payable"
  }
]
// Read data using direct calls to your contract
const myData = await contract.call("myFunction");

// Or Using the extensions API matching to your contract extensions
const allNFTs = await contract.erc721.getAll();
const tokenSupply = await contract.erc20.totalSupply();



// node my_script.js